{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1fdDdDHaE4KNBgvMIfCjJ2U7NY_5A7bzr","timestamp":1732615384767}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["**ФИО:**"],"metadata":{"id":"GEsFKJm-ABFp"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"wZMLYG_G_-19"},"outputs":[],"source":["Сучков Павел Алексеевич"]},{"cell_type":"markdown","source":["# Задание 1"],"metadata":{"id":"H4DrYnJjADuZ"}},{"cell_type":"markdown","source":["**Описание:** Создайте иерархию классов для разных типов сотрудников в компании. Реализуйте родительский класс Employee и дочерние классы Manager и Developer. Каждый класс должен иметь метод для расчета зарплаты на основе различных критериев класса.\n","\n","\n","Отрабатываемый принцип: Наследование\n","\n"],"metadata":{"id":"C17FWep-AF4a"}},{"cell_type":"code","source":["class Employee:\n","\n","  minimum_wage = 30000\n","\n","  def __init__(self, importance):\n","    self.importance = importance\n","\n","  def salary(self):\n","    return int(self.minimum_wage)\n","\n","\n","class Manager(Employee):\n","\n","  def __init__(self, importance):\n","    super().__init__(importance)\n","\n","  def salary(self):\n","    return int((1 + self.importance/100) * self.minimum_wage)\n","\n","\n","class Developer(Employee):\n","\n","  def __init__(self, importance):\n","    super().__init__(importance)\n","\n","  def salary(self):\n","    return int((1 + self.importance*2/100) * self.minimum_wage)\n","\n","\n","a = Employee(2)\n","b = Manager(2)\n","c = Developer(2)\n","\n","print(a.salary())\n","print(b.salary())\n","print(c.salary())"],"metadata":{"id":"aexGXzqCAFH7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732617456839,"user_tz":-300,"elapsed":324,"user":{"displayName":"UniqueG","userId":"12397292054922786937"}},"outputId":"f4885ff6-5343-4724-9523-756fdde11398"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["30000\n","30600\n","31200\n","30000\n","30900\n","32400\n"]}]},{"cell_type":"markdown","source":["# Задание 2"],"metadata":{"id":"ERAi0TG5BI6v"}},{"cell_type":"markdown","source":["**Описание:** Создайте иерархию классов для различных типов транспортных средств (Необходим один родительский класс и 3 дочерних). Реализуйте метод, который позволяет каждому транспортному средству возвращать собственное описание (Метод в каждом классе должен иметь одинаковое название). Продемонстрируйте вызов данного метода для каждого транспортного средства.\n","\n","\n","Отрабатываемый принцип: Полиморфизм"],"metadata":{"id":"sJ3k7ZcgBK87"}},{"cell_type":"code","source":["class Transport:\n","\n","  def __init__(self, type_, max_speed, route_type):\n","    self.type_ = type_\n","    self.max_speed = max_speed\n","    self.route_type = route_type\n","\n","\n","  def info(self):\n","    print(f\"Тип: {self.type_}\\nМакс. скорость: {self.max_speed}\\\n","    \\nМаршрут: {self.route_type}\")\n","\n","\n","class Bus(Transport):\n","\n","  def __init__(self, type_, max_speed, route_type, route_numbers):\n","    self.route_numbers = route_numbers\n","    super().__init__(type_, max_speed, route_type)\n","\n","\n","  def info(self):\n","    print(f\"Тип: {self.type_}\\nМакс. скорость: {self.max_speed}\\\n","    \\nМаршрут: {self.route_type}\\nНомера маршрутов: {self.route_numbers}\")\n","\n","\n","class Tram(Transport):\n","\n","  def __init__(self, type_, max_speed, route_type, route_numbers):\n","    self.route_numbers = route_numbers\n","    super().__init__(type_, max_speed, route_type)\n","\n","\n","  def info(self):\n","    print(f\"Тип: {self.type_}\\nМакс. скорость: {self.max_speed}\\\n","    \\nМаршрут: {self.route_type}\\nНомера маршрутов: {self.route_numbers}\")\n","\n","\n","class Airplane(Transport):\n","\n","  def __init__(self, type_, max_speed, route_type):\n","    self.route_numbers = route_numbers\n","    super().__init__(type_, max_speed, route_type)\n","\n","\n","  def info(self):\n","    print(f\"Тип: {self.type_}\\nМакс. скорость: {self.max_speed}\\\n","    \\nМаршрут: {self.route_type}\\nНомера маршрутов: {self.route_numbers}\")\n","\n","\n","a = Transport(\"Auto\", 210, \"Ground\")\n","b = Tram(\"Tram\", 800, \"Ground\", [19, 12])\n","c = Bus(\"Bus\", 120, \"Ground\", [12, 13, 14])\n","d = Airplane(\"Airplane\", 900, \"Air\")\n","\n","a.info()\n","b.info()\n","c.info()\n","d.info()"],"metadata":{"id":"WOFOZQmDBKf4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732618484302,"user_tz":-300,"elapsed":292,"user":{"displayName":"UniqueG","userId":"12397292054922786937"}},"outputId":"a630dd51-c329-494a-80b2-ddc011ced763"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Тип: Auto\n","Макс. скорость: 210    \n","Маршрут: Ground\n","Тип: Tram\n","Макс. скорость: 800    \n","Маршрут: Ground\n","Номера маршрутов: [19, 12]\n"]}]},{"cell_type":"markdown","source":["# Задание 3"],"metadata":{"id":"7E_SJXMJBvD4"}},{"cell_type":"markdown","source":["Онлайн-магазин:\n","- Создайте модель для онлайн-магазина с классами Product, Order, Customer, и ShoppingCart.\n","- Product включает информацию о цене, наличии на складе и категории товара.\n","Order обрабатывает процесс покупки, включая расчет цены с учетом скидок и налогов.\n","- Customer управляет информацией о пользователе и его истории заказов.\n","- ShoppingCart позволяет добавлять, удалять и обновлять количество товаров перед оформлением заказа.\n"],"metadata":{"id":"dd1mwKj_BxHa"}},{"cell_type":"code","source":["import random as rn\n","\n","\n","class Product:\n","\n","  def __init__(self, price, is_available, category):\n","    self.price = price\n","    self.is_available = is_available\n","    self.category = category\n","\n","\n","  def info(self):\n","    print(f\"Price: {self.price}\")\n","    print(\"Available\" if self.is_available == True else \"Out of stock\")\n","\n","\n","  def format_(self):\n","    return {\n","       'price': self.price,\n","       'is_available': self.is_available,\n","       'category': self.category\n","    }\n","\n","\n","class ShoppingCart:\n","\n","  def __init__(self, total_cost, all_available, number_of_products):\n","    self.total_cost = total_cost\n","    self.all_available = all_available\n","    self.number_of_products = number_of_products\n","\n","\n","  def info(self):\n","    print(f\"Total cost: {self.price}\")\n","    print(\"All available\" if all(self.is_available) else \"Not all in stock\")\n","    print(f\"There are {self.number_of_products} products in your cart\")\n","\n","\n","  def add_to_cart(self, object_):\n","    self.total_cost += object_['price']\n","    self.all_available.append(object_['is_available'])\n","    self.number_of_products += 1\n","\n","\n","  def remove_from_cart(self, object_):\n","    self.total_cost -= object_['price']\n","\n","    temp0 = str(object_['is_available'])\n","    temp = \"\".join(self.all_available).replace(temp0, 1)\n","\n","    temp = temp.replace(temp0, 1)\n","\n","    self.all_available = [int(i) for i in temp]\n","\n","    self.number_of_products -= 1\n","\n","\n","  def format_(self):\n","    return {\n","        'total_cost': self.total_cost,\n","        'all_available': self.all_available,\n","        'number_of_products': self.number_of_products\n","    }\n","\n","\n","class Order:\n","\n","  def order(self, cart_):\n","    self.order_id = rn.randint(1000000, 9999999)\n","\n","    if all(cart_['all_available']):\n","      print(f\"Your order id is {self.order_id}.\")\n","\n","      price = cart_['total_cost'] * 1.2 #taxes\n","\n","      print(f\"Total cost is {price} USD. Payment after receiving\")\n","\n","      return self.order_id\n","\n","    else:\n","      print(\"Some products are unavailable. Remove them from the cart before proceeding further\")\n","\n","\n","class Customer:\n","\n","  def __init__(self, login, age, orders):\n","    self.login = login\n","    self.age = age\n","    self.orders = orders\n","\n","  def info(self):\n","    print(f\"Login: {self.login}\")\n","    print(f\"Age: {self.age}\")\n","    print(f\"Orders history: {self.orders}\")\n","\n","\n","products = {\n","    'Bandage': Product(99, 1, \"Unknown\"),\n","    'Teapot': Product(349, 0, \"Tea stuff\"),\n","    'Scales': Product(5999, 1, \"Electronics\")\n","}\n","\n","cart = ShoppingCart(0, [1], 0)\n","\n","while True:\n","  print(f\"Your cart: {cart.format_()['number_of_products']} products\")\n","  print(f\"----\\nProducts you watched: {', '.join(list(i for i in products))}\")\n","\n","  print(\"1 - Order\")\n","  print(\"2 - Add to cart\")\n","  print(\"3 - Remove from cart\")\n","\n","  cmd = int(input())\n","\n","  if cmd == 1:\n","    ordering = Order()\n","    ordering.order(cart.format_())\n","\n","  elif cmd == 2:\n","    list_ = list(i for i in products)\n","\n","    for i in range(1, 4): print(f\"{i}) {list_[i-1]}\")\n","\n","    print(\"Print a number of the product you want to add to your cart\")\n","\n","    num = int(input())\n","    cart.add_to_cart(products[list_[num - 1]].format_())\n","\n","  elif cmd == 3:\n","    for i in range(1, 4): print(f\"{i}) {products[i-1]}\")\n","\n","    print(\"Print a number of the product you want to remove from your cart\")\n","\n","    num = int(input())\n","    cart.remove_from_cart(products[num].format_())\n","\n","  else: print(\"Unknown command\")\n","\n","\n","\n","\n","\n","\n","\n","\n","\n"],"metadata":{"id":"wkCcv_K-Bwdv","colab":{"base_uri":"https://localhost:8080/","height":825},"executionInfo":{"status":"error","timestamp":1732964534128,"user_tz":-300,"elapsed":23427,"user":{"displayName":"UniqueG","userId":"12397292054922786937"}},"outputId":"c3da268d-5a10-4125-b0d2-9f7bfda7157f"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["Your cart: 0 products\n","----\n","Products you watched: Bandage, Teapot, Scales\n","1 - Order\n","2 - Add to cart\n","3 - Remove from cart\n","2\n","1) Bandage\n","2) Teapot\n","3) Scales\n","Print a number of the product you want to add to your cart\n","1\n","Your cart: 1 products\n","----\n","Products you watched: Bandage, Teapot, Scales\n","1 - Order\n","2 - Add to cart\n","3 - Remove from cart\n","1\n","Your order id is 2375940.\n","Total cost is 118.8 USD. Payment after receiving\n","Your cart: 1 products\n","----\n","Products you watched: Bandage, Teapot, Scales\n","1 - Order\n","2 - Add to cart\n","3 - Remove from cart\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"Interrupted by user","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-17-bc8cd797a004>\u001b[0m in \u001b[0;36m<cell line: 105>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    111\u001b[0m   \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"3 - Remove from cart\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    112\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 113\u001b[0;31m   \u001b[0mcmd\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    114\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    115\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mcmd\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m    849\u001b[0m                 \u001b[0;34m\"raw_input was called, but this frontend does not support input requests.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    850\u001b[0m             )\n\u001b[0;32m--> 851\u001b[0;31m         return self._input_request(str(prompt),\n\u001b[0m\u001b[1;32m    852\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    853\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_header\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    893\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    894\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 895\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Interrupted by user\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    896\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    897\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwarning\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid Message:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexc_info\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: Interrupted by user"]}]},{"cell_type":"markdown","source":["# Задание 4"],"metadata":{"id":"ih7iPlYfB7lL"}},{"cell_type":"markdown","source":["Симулятор космического корабля:\n","- Создайте симулятор управления космическим кораблем с классами SpaceShip, CrewMember, и Mission.\n","- SpaceShip имеет атрибуты для управления топливом, состоянием корпуса, и текущей скоростью.\n","- CrewMember контролирует здоровье, навыки, и роли в команде (например, пилот, инженер).\n","- Mission определяет цели, ресурсы, и возможные события (например, аварии, встречи с астероидами)."],"metadata":{"id":"zLwqVCbpCBvc"}},{"cell_type":"code","source":["class SpaceShip:\n","\n","  def __init__(self, fuel, state, speed):\n","    self.fuel = fuel\n","    self.state = state\n","    self.speed = speed\n","\n","  def repair(self):\n","    self.state = 100\n","\n","  def fill_up(self):\n","    self.fuel = 100\n","\n","  def format_(self):\n","    return {\n","        'fuel': self.fuel,\n","        'state': self.state,\n","        'speed': self.speed\n","    }\n","\n","\n","class CrewMember:\n","\n","  def __init__(self, health, skills, role):\n","    self.health = health\n","    self.skills = skills\n","    self.role = role\n","\n","  def format_(self):\n","    return {\n","        'health': self.health,\n","        'skills': self.skills,\n","        'role': self.role\n","    }\n","\n","\n","class Pilot(CrewMember):\n","\n","  def __init__(self, health, skills, role):\n","    super().__init__(health, skills, role)\n","\n","  def format_(self):\n","    return {\n","        'health': self.health,\n","        'skills': self.skills,\n","        'role': self.role\n","    }\n","\n","class Imposter(CrewMember):\n","\n","  def __init__(self, health, skills, role):\n","    super().__init__(health, skills, role)\n","\n","  def format_(self):\n","    return {\n","        'health': self.health,\n","        'skills': self.skills,\n","        'role': self.role\n","    }\n","\n","\n","class Mission:\n","\n","  def __init__(self, task, resources_needed, events):\n","    self.task = task\n","    self.resources = resources_needed\n","    self.events = events\n","\n","  def format(self):\n","    return {\n","        'task': task,\n","        'resources': resources,\n","        'events': events\n","    }\n"],"metadata":{"id":"4NyrOOy8B9ED","executionInfo":{"status":"ok","timestamp":1732966306804,"user_tz":-300,"elapsed":277,"user":{"displayName":"UniqueG","userId":"12397292054922786937"}}},"execution_count":18,"outputs":[]},{"cell_type":"markdown","source":["# Дополнительно:"],"metadata":{"id":"F7mRVsZjCXk0"}},{"cell_type":"markdown","source":["**Описание:** создайте консольную версию игры крестики-нолики, используя классы"],"metadata":{"id":"X4Lkf86UCc1h"}},{"cell_type":"code","source":[],"metadata":{"id":"x9OxpNsyCcUo"},"execution_count":null,"outputs":[]}]}
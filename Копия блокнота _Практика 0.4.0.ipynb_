{"cells":[{"cell_type":"markdown","metadata":{"id":"k8oVfdwrMXyc"},"source":["Введите ваше ФИО:"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5mcBLsKMI1-5"},"outputs":[],"source":["Сучков Павел Алексеевич (Преподаватель дал более сложное задание)"]},{"cell_type":"markdown","metadata":{"id":"8HbYUbm3Jw3o"},"source":["***Дисклеймер***\n","\n","В данной практике запрещено использования функций:\n","\n","\n","*   sum()\n","*   min()\n","*   max()\n","*   average()\n","*   reversed()\n","*   sorted()\n","*   готовые функции или библиотеки\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7LNW8DuHQJwH"},"outputs":[],"source":[]},{"cell_type":"markdown","metadata":{"id":"-SIWYSq2QKBh"},"source":["**Задача 5:**\n","\n","Шифр ​​Цезаря\n","\n","Напишите программу на Python, которая реализует шифр Цезаря, простой метод шифрования, который заменяет каждую букву буквой на фиксированное количество позиций вниз по алфавиту. Программа должна запрашивать у пользователя сообщение и значение сдвига, а затем шифровать и расшифровывать сообщение.\n","\n","Этап 1:\n","\n","Напишите код для реализации данной задачи\n","\n","Этап 2:\n","\n","Оформите код в виде нескольких функций:\n","\n","* Зашифровывает сообщение\n","* Расшифровывает сообщение"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11510,"status":"ok","timestamp":1728385222091,"user":{"displayName":"UniqueG","userId":"12397292054922786937"},"user_tz":-300},"id":"anThYirsQe6N","outputId":"19cd731e-5436-49d4-c97c-9c02fed196aa"},"outputs":[{"name":"stdout","output_type":"stream","text":["Введите сообщение: Яблоко\n","Введите числовое значение сдвига: 2\n","Расшифровать? Зашифровать?\n","Зашифровать\n","БГНРМР"]}],"source":["a = input(\"Введите сообщение: \")\n","b = int(input(\"Введите числовое значение сдвига: \"))\n","print(\"Расшифровать? Зашифровать?\")\n","\n","alph = \"АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ\"\n","\n","def encrypt(a, b, alph):\n","  for i in range(len(a)):\n","    if a[i].upper() in alph: print(alph[(alph.index(a[i].upper()) + b) % 33], end=\"\")\n","    else: print(a[i], end=\"\")\n","\n","def decrypt(a, b, alph):\n","  for i in range(len(a)):\n","    if a[i].upper() in alph: print(alph[alph.index(a[i].upper()) - b], end=\"\")\n","    else: print(a[i], end=\"\")\n","\n","\n","com = input()\n","encrypt(a, b, alph) if com == \"Зашифровать\" else decrypt(a, b, alph)"]},{"cell_type":"markdown","metadata":{"id":"avFZRRXrQz9O"},"source":["**Задача 6**\n","\n","Задача: «Банковская система»\n","\n","Создайте программу Python, которая имитирует базовую банковскую систему. Система должна иметь следующие функции:\n","\n","Требования\n","*   Система должна позволять клиентам создавать счета и хранить их балансы.\n","*   Система должна позволять клиентам вносить и снимать деньги со своих счетов.\n","*   Система должна позволять клиентам проверять свой текущий баланс.\n","*   Система должна позволять клиентам переводить деньги между счетами.\n","*   Система должна отслеживать транзакции (депозиты, снятия и переводы) и иметь возможность печатать детали транзакций.\n","\n","\n","Задачи\n","1. Реализуйте банковскую систему, используя только базовые конструкции Python, такие как def, lists, if, elif и else, без классов или словарей.\n","Определите функции для создания счетов, внесения и снятия денег, получения балансов счетов, перевода денег между счетами, а также создания и печати транзакций.\n","2. Напишите основную функцию, которая демонстрирует использование банковской системы путем создания счетов, внесения и снятия денег и перевода денег между счетами.\n","3. Бонусное задание\n","Реализуйте способ хранения и печати истории транзакций для каждого счета.\n","\n","Ограничения\n","Не используйте классы или словари.\n","Используйте только базовые конструкции Python, такие как def, lists, if, elif и else.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":331,"status":"ok","timestamp":1728376672990,"user":{"displayName":"Вадим Стрельцов","userId":"11067832340591659958"},"user_tz":-300},"id":"dWEW10zIRwjs","outputId":"761d1d03-5ecd-47b4-9ec3-d964c25fe29a"},"outputs":[{"name":"stdout","output_type":"stream","text":["John Doe's current balance: $500\n","Transaction: Initial deposit, $1000, deposit\n","Transaction: Withdrawal, $500, withdrawal\n","Jane Doe's current balance: $200\n"]}],"source":["dyn = 1\n","history = []\n","accounts = []\n","while True:\n","    print(\"--------\\nСписок Ваших счетов:\")\n","    for i in accounts: print(i[0], end=\"; \")\n","    a = int(input(\"\\nВведите номер операции: \\n1 - Открыть счёт\\n2 - Положить деньги на счёт\\n3 - Снять деньги со счёта\\n4 - История транзакций\\n5 - Перевод между счетами\\n6 - Проверить баланс\\n\"))\n","    if a == 1:\n","        print(\"Новый счёт успешно открыт!\")\n","        accounts.append([f\"ACC-{dyn}\", 0])\n","        dyn += 1\n","    if a == 2:\n","        while True:\n","            if len(accounts) == 0:\n","                print(\"У Вас нет доступных счетов для проведения операции\")\n","            else:\n","                num = int(input(\"Введите число после '-' в названии счёта, на который вы хотите положить деньги: \"))\n","                if num \u003e= dyn:\n","                    print(\"Несуществующий счёт. Произошла ошибка\")\n","                    continue\n","                deposit = int(input(\"Введите сумму депозита: \"))\n","                accounts[num-1][1] += deposit\n","                history.append(f\"Пополнение счёта {accounts[num-1][0]} на {deposit}$\")\n","                break\n","    if a == 3:\n","        while True:\n","            if len(accounts) == 0:\n","                print(\"У Вас нет доступных счетов для проведения операции\")\n","            else:\n","                num = int(input(\"Введите число после '-' в названии счёта, с которого вы хотите списать деньги: \"))\n","                if num \u003e= dyn:\n","                    print(\"Несуществующий счёт. Произошла ошибка\")\n","                    continue\n","                withdrawal = int(input(\"Введите сумму списания: \"))\n","                if withdrawal \u003c= accounts[num-1][1]:\n","                    accounts[num-1][1] -= withdrawal\n","                    history.append(f\"Снятие средств со счёта {accounts[num-1][0]} на {withdrawal}$\")\n","                    break\n","                else:\n","                    print(\"Недостаточно средств для списания. Операция прервана\")\n","                    history.append(f\"Ошибка операции снятия средств со счёта {accounts[num-1][0]} на {withdrawal}$\")\n","                    break\n","    if a == 4:\n","        print(\"История операций\")\n","        for i in history: print(f\"- {i}\")\n","    if a == 5:\n","        while True:\n","            rec = input(\"Введите 1, если хотите перевести на свой счёт и 2, если на чужой: \")\n","            if rec == 1:\n","                if len(accounts) \u003c 2:\n","                    print(\"У Вас недостаточно счетов для проведения операции\")\n","                else:\n","                    num = int(input(\"Введите число после '-' названии счёта, на который вы хотите положить деньги: \"))\n","                    if num \u003e= dyn:\n","                        print(\"Несуществующий счёт. Произошла ошибка\")\n","                        continue\n","                    summ = int(input(\"Введите сумму для перевода: \"))\n","                    num1 = int(input(\"Введите число после '-' в названии счёта, с которого вы хотите списать деньги: \"))\n","                    if num1 \u003e= dyn:\n","                        print(\"Несуществующий счёт. Произошла ошибка\")\n","                        continue\n","                    if summ \u003c= accounts[num1-1][1]:\n","                        accounts[num1-1][1] -= summ\n","                        accounts[num-1][1] += summ\n","                        history.append(f\"Перевод средств со счёта {accounts[num1-1][0]} на счёт {accounts[num-1][0]} на сумму {summ}$\")\n","                        break\n","                    else:\n","                        print(\"Недостаточно средств для списания. Операция прервана\")\n","                        history.append(f\"Ошибка операции перевода средств со счёта {accounts[num1-1][0]} на счёт {accounts[num-1][0]} на {withdrawal}$\")\n","                        break\n","            else:\n","                num = int(input(\"Введите число после '-' названии счёта, с которого вы хотите списать деньги: \"))\n","                if num \u003e= dyn:\n","                    print(\"Несуществующий счёт. Произошла ошибка\")\n","                    continue\n","                summ = int(input(\"Введите сумму для перевода: \"))\n","                num1 = int(input(\"Введите номер чужого счёта, на который вы хотите положить деньги: \"))\n","                accounts[num-1][1] -= summ\n","                history.append(f\"Перевод средств со счёта {accounts[num-1][0]} на счёт {num1} на сумму {summ}$\")\n","                break\n","    if a == 6:\n","        total = 0\n","        for i in accounts:\n","            print(f\"{i[0]} - {i[1]}$\")\n","            total += i[1]\n","        print(f\"Общий баланс - {total}\")\n"]},{"cell_type":"markdown","metadata":{"id":"TEszDdG7taCN"},"source":["Доп задание:\n","\n","**Задача:** реализовать игру «2048» на Python.\n","\n","**Цель:**\n","\n","Создайте консольную игру 2048 с помощью Python, в которой пользователь может перемещать плитки вверх, вниз, влево или вправо, чтобы объединить одинаковые плитки и попытаться достичь цели — получить плитку со значением 2048.\n","\n","**Правила игры:**\n","\n","Игра начинается с сетки 4x4 с двумя случайными плитками со значениями 2 или 4.\n","Пользователь может перемещать плитки в одном из четырех направлений (вверх, вниз, влево или вправо), используя клавиши «w», «a», «s» и «d» соответственно.\n","Когда две одинаковые плитки сталкиваются, они сливаются в одну плитку со значением, равным сумме двух исходных плиток.\n","После каждого хода в сетку добавляется новая случайная плитка со значением 2 или 4.\n","Игра заканчивается, когда не остается больше возможных ходов, и пользователь уведомляется о том, что игра окончена.\n","Выполнение:\n","\n","Предоставленный код реализует игру 2048 с использованием Python с функциями для:\n","\n","Инициализация игрового поля\n","* Добавление новых плиток на доску\n","* Печать платы\n","* Проверяем, возможен ли переезд\n","* Сжатие доски для удаления пустых мест\n","* Объединение одинаковых плиток\n","* Перемещение плиток в разных направлениях\n","* Проверка окончания игры\n","* Запуск основного игрового цикла\n","Примечание:\n","\n","Эта реализация использует модуль os для очистки экрана консоли и модуль случайных чисел для генерации случайных чисел для новых плиток. В игре используется простой текстовый интерфейс, и пользователь вводит свои ходы с помощью клавиш «w», «a», «s» и «d»."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"dkG5KKdFta-X"},"outputs":[{"name":"stdout","output_type":"stream","text":["Total score: 0\n","-----------\n","0 0 0 0 \n","0 2 0 0 \n","2 0 0 0 \n","0 0 0 0 \n","-----------\n","Total score: 0\n","-----------\n","0 0 0 0 \n","2 0 0 0 \n","2 0 0 0 \n","0 2 0 0 \n","-----------\n","Total score: 4\n","-----------\n","2 0 0 0 \n","0 0 0 0 \n","0 0 0 0 \n","4 2 0 0 \n","-----------\n","Total score: 4\n","-----------\n","0 0 0 2 \n","0 0 0 0 \n","2 0 0 0 \n","4 2 0 0 \n","-----------\n","Total score: 4\n","-----------\n","2 0 0 0 \n","0 0 0 0 \n","2 0 0 0 \n","4 2 0 2 \n","-----------\n","Total score: 8\n","-----------\n","0 0 0 0 \n","2 0 0 0 \n","4 0 0 0 \n","4 2 0 2 \n","-----------\n","Total score: 16\n","-----------\n","2 0 0 0 \n","0 0 0 0 \n","2 0 0 0 \n","8 2 0 2 \n","-----------\n","Total score: 20\n","-----------\n","2 0 0 0 \n","0 0 0 0 \n","4 0 0 0 \n","8 2 0 2 \n","-----------\n","Total score: 20\n","-----------\n","0 0 0 0 \n","2 0 0 0 \n","4 0 0 0 \n","8 2 2 2 \n","-----------\n","Total score: 24\n","-----------\n","0 0 0 0 \n","2 0 0 0 \n","4 0 0 0 \n","8 4 2 2 \n","-----------\n","Total score: 28\n","-----------\n","0 0 0 0 \n","2 0 0 0 \n","4 0 2 0 \n","8 4 4 0 \n","-----------\n","Total score: 36\n","-----------\n","0 0 0 0 \n","2 0 0 0 \n","4 2 0 0 \n","8 8 2 0 \n","-----------\n","Total score: 52\n","-----------\n","0 0 0 2 \n","2 0 0 0 \n","4 2 0 0 \n","16 2 0 0 \n","-----------\n","Total score: 52\n","-----------\n","2 2 0 0 \n","2 0 0 0 \n","4 2 0 0 \n","16 2 0 0 \n","-----------\n","Total score: 60\n","-----------\n","0 0 0 0 \n","4 0 0 0 \n","4 2 2 0 \n","16 4 0 0 \n","-----------\n","Total score: 68\n","-----------\n","2 0 0 0 \n","0 0 0 0 \n","8 2 0 0 \n","16 4 2 0 \n","-----------\n"]}],"source":["import random\n","\n","field = [[0, 0, 0, 0] for i in range(4)]\n","score = 0\n","\n","def f_render(): #Field rendering\n","    print(f\"Total score: {score}\\n-----------\")\n","    for i in field:\n","        for j in i: print(j, end=\" \")\n","        print(\"\")\n","    print(\"-----------\")\n","\n","def move(ch): #Movements calculation\n","    global score\n","    if ch.lower() == \"w\" or ch.lower() == \"s\" or ch.lower() == \"a\" or ch.lower() == \"d\":\n","        v = True if ch.lower() == \"w\" or ch.lower() == \"s\" else False #Checks if direction of the movement is vertical\n","        univ = [] #Array that keeps rows/columns depending on direction of the made move\n","        for i in range(4):\n","            if v: univ.append([field[0][i], field[1][i], field[2][i], field[3][i]])\n","            else: univ.append(field[i])\n","        for i in range(4):\n","            temp = [] #Temporary array that keeps non-zero numbers in rows/columns\n","            for j in range(4):\n","                if univ[i][j] != 0: temp += [univ[i][j]]\n","            univ[i] = temp + [0] * (4 - len(temp)) if ch.lower() == \"w\" or ch.lower() == \"a\" else [0] * (4 - len(temp)) + temp #Rearrangement of numbers\n","\n","            #Following \"if else\" construction sums up the numbers according to the rules of the game and my own observations\n","\n","            if ch.lower() == \"w\" or ch.lower() == \"a\":\n","                for j in range(3):\n","                    if univ[i][j] == univ[i][j+1] and univ[i][j] != 0:\n","                        univ[i] = univ[i][:j] + [int(univ[i][j])*2] + univ[i][j+2:] + [0]\n","                        score += int(univ[i][j])\n","            else:\n","                for j in range(3, 0, -1):\n","                    if univ[i][j] == univ[i][j-1] and univ[i][j] != 0:\n","                        univ[i] = [0] + univ[i][:j-1] + [int(univ[i][j])*2] + univ[i][j+1:]\n","                        score += int(univ[i][j])\n","\n","        for i in range(4): #Update of the game field\n","            if v: field[i] = [univ[0][i], univ[1][i], univ[2][i], univ[3][i]]\n","            else: field[i] = univ[i]\n","    else:\n","        move(ch)\n","\n","def defeat(): #Checks if we lost the game or nah\n","    rAc = []\n","    for i in range(4):\n","        rAc.append([field[0][i], field[1][i], field[2][i], field[3][i]])\n","        rAc.append(field[i])\n","    for i in rAc:\n","        for j in range(1, 4):\n","            if (i[j] == i[j-1] and i[j] != 0) or i[j] == 0: return False\n","    return True\n","\n","x1, y1 = random.randint(0, 3), random.randint(0, 3)\n","field[y1][x1] = 2\n","\n","x2, y2 = x1, y1\n","\n","while True:\n","    x2, y2 = random.randint(0, 3), random.randint(0, 3)\n","    while field[y2][x2] != 0:\n","        x2, y2 = random.randint(0, 3), random.randint(0, 3)\n","    field[y2][x2] = 2\n","    f_render()\n","\n","    flag = False\n","\n","    for i in field:\n","        for j in i:\n","            if j == 2048:\n","                print(\"Victory!\")\n","                flag = True\n","        if flag: break\n","    if flag: break\n","\n","    if defeat():\n","        print(\"You lost!\")\n","        break\n","    d = input()\n","    move(d)\n","\n","\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"O2QSn7HSvzdM"},"outputs":[],"source":[]}],"metadata":{"colab":{"name":"","provenance":[{"file_id":"1ZwSBZ3XI_wE-I4fLWA5wTMNwpfTDz2ov","timestamp":1728382638979}],"version":""},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}